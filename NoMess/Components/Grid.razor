<div style="width: fit-content;">
<h1>No Mess</h1>
<div style="width: 100%; display:flex;">
    <div style="text-align:left; display:inline-block;">Next: @(string.Join("", _next))</div> 
    <div style="display: inline-block; flex-grow:1; text-align:right;">Cleared: @_score <br/></div>
</div>
@for(int row = 0; row < Size; row++)
{
    for(int col = 0; col < Size; col++)
    {
        int id = col + row * Size;
        string symbol = @_grid[col + row * Size];
        <button
          style="@Style(id)"
          @onclick="() => InteractWithTile(id)"
        >
        @if(symbol == String.Empty)
        {
            <text>&nbsp;</text>
        }
        else
        {
            <text>@symbol</text>
        }
        </button>
    }
    <br/>
}

<p style="margin-top:20px"><button @onclick="Init">Restart</button></p>
</div>
@code
{
    public const int ClearLength = 3;
    public const int Size = 9;
    public const int StartCells = 7;
    private List<string> _next = [];
    private HashSet<int> _reachable = [];
    private int _score = 0;
    public readonly IReadOnlyList<string> Symbols = ["üí£", "üôÉ", "üéÖ", "üè¥"];
    private string[] _grid = [.. Enumerable.Repeat(string.Empty, Size * Size) ];
    private int? _selectedId = null;
    private List<int> _lastCleared = [];
    private List<int> _lastPlaced = [];

    public string Style(int id)
    {
        string border = "border-color: black;";
        string background = "";
        if (id == _selectedId)
        {
            border = "border-color: yellow;";
        }
        if (_reachable.Contains(id))
        {
            background = "background-color: #bdbdbd;";
        }
        else if (_lastPlaced.Contains(id))
        {
            background = "background-color: pink;";
        }
        else if (_lastCleared.Contains(id))
        {
            background = "background-color: gray;";
        }

        return $"width: 48px; height:48px; margin:2px 2px; {border} {background}";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Init();
    }

    public void Init()
    {
        _score = 0;
        _lastCleared.Clear();
        _lastPlaced.Clear();
        _reachable.Clear();
        _selectedId = null;
        _grid = [.. Enumerable.Repeat(string.Empty, Size * Size) ];
        int count = 0;
        int[] empties = EmptyPositions().ToArray();
        Random.Shared.Shuffle(empties);
        foreach (int pos in empties.Take(StartCells)) {
            _lastPlaced.Add(pos);
            int symbol = Random.Shared.Next(0, Symbols.Count);
            _grid[pos] = Symbols[symbol];
            count++;
        }
        GenerateNext();
    }

    private bool PlaceNext()
    {
        int[] empties = EmptyPositions().ToArray();
        Random.Shared.Shuffle(empties);
        int placed = 0;
        for (int ix = 0; ix < empties.Length && ix < _next.Count; ix++)
        {
            string ch = _next[ix];
            PlaceTile(empties[ix], ch);
            _lastPlaced.Add(empties[ix]);
            placed++;
        }
        return placed == _next.Count;
    }

    private List<int> EmptyPositions()
    {
        List<int> empties = new ();
        for (int pos = 0; pos < _grid.Length; pos++)
        {
            if (_grid[pos] == string.Empty)
            {
                empties.Add(pos);
            }
        }
        return empties;
    }

    private void GenerateNext()
    {
        _next.Clear();
        for (int count = 0; count < 3; count++)
        {
            _next.Add(Symbols[Random.Shared.Next(0, Symbols.Count)]);
        }
    }

    private void PlaceTile(int pos, string tile) => _grid[pos] = tile;

    private void InteractWithTile(int pos)
    {
        if (_selectedId.HasValue)
        {
            HandleSecondClick(pos);
        }
        else if (_grid[pos] != string.Empty)
        {
            _selectedId = pos;
        }
        if (_selectedId.HasValue)
        {
            _reachable = FindReachable(_selectedId.Value);
        }
    }

    private void HandleSecondClick(int second)
    {
        if (!_selectedId.HasValue) { return; }
        int first = _selectedId.Value;
        if (_grid[second] == string.Empty)
        {
            Move(first, second);
        }
        else if (first == second)
        {
            _selectedId = null;
            _reachable.Clear();
        }
        else if (_grid[second] != string.Empty)
        {
            _selectedId = second;
        }
    }

    private void Move(int fromPos, int toPos)
    {
        if (!_reachable.Contains(toPos)) { return; }
        _lastCleared.Clear();
        _lastPlaced.Clear();
        _reachable.Clear();
        _grid[toPos] = _grid[fromPos];
        _grid[fromPos] = string.Empty;
        _selectedId = null;
        _lastCleared.AddRange(FindAndClear());
        if (_lastCleared.Count() == 0)
        {
            PlaceNext();
            GenerateNext();
            _lastCleared.AddRange(FindAndClear());
        }
        _score += _lastCleared.Count;
    }

    private List<int> FindAndClear()
    {
        List<int> cleared = FindCleared();
        foreach (int pos in cleared)
        {
            PlaceTile(pos, string.Empty);
        }
        return cleared;
    }

    private List<int> FindCleared()
    {
        List<int> cleared = [];
        cleared.AddRange(FindClearedRows());
        cleared.AddRange(FindClearedColumns());
        cleared.AddRange(FindClearedDiagonals());
        return cleared;
    }

    private List<int> FindClearedRows()
    {
        List<int> cleared = [];
        for (int row = 0; row < Size; row++)
        {
            cleared.AddRange(FindCleared(0, row, 1, 0));
        }
        return cleared;
    }

    private List<int> FindClearedColumns()
    {
        List<int> cleared = [];
        for (int col = 0; col < Size; col++)
        {
            cleared.AddRange(FindCleared(col, 0, 0, 1));
        }
        return cleared;
    }

    private List<int> FindClearedDiagonals()
    {
        List<int> cleared = [];
        for (int edge = 0; edge < Size; edge++)
        {
            cleared.AddRange(FindCleared(edge, 0, 1, 1));
            cleared.AddRange(FindCleared(edge, 0, -1, 1));
            cleared.AddRange(FindCleared(0, edge, 1, 1));
            cleared.AddRange(FindCleared(Size-1, edge, -1, 1));
        }
        return cleared;
    }

    private bool InBounds(int row, int col) => row >= 0 && row < Size && col >= 0 && col < Size;

    private List<int> FindCleared(int startCol, int startRow, int cDir, int rDir)
    {
        List<int> cleared = [];
        for (int row = startRow, col = startCol; InBounds(row, col); row += rDir, col += cDir)
        {
            int pos = ToPos(row, col);
            string symbol = _grid[ToPos(row, col)];
            // Skip blanks
            if (symbol == string.Empty) { continue; }

            // Find all matching symbols
            cleared.Add(pos);
            while (InBounds(row + rDir, col + cDir) && _grid[ToPos(row + rDir, col + cDir)] == symbol)
            {
                row += rDir;
                col += cDir;
                cleared.Add(ToPos(row, col));
            }

            // If we found 5 or more, return those found.
            if (cleared.Count >= ClearLength) { return cleared; }

            // Otherwise we clear what we found and go to the next iteration
            cleared.Clear();
        }
        return cleared;
    }

    private int ToRow(int pos) => pos / Size;
    private int ToCol(int pos) => pos % Size;
    private int ToPos(int row, int col) => col + row * Size;

    private HashSet<int> FindReachable(int pos)
    {
        if (pos < 0 || pos >= _grid.Length) { return []; }
        HashSet<int> reachable = new();
        Queue<int> toVisit = new();
        toVisit.Enqueue(pos);
        reachable.Add(pos);

        while (toVisit.TryDequeue(out int next))
        {
            foreach (int neighbor in Neighbors(next))
            {
                if (reachable.Contains(neighbor) || _grid[neighbor] != string.Empty) { continue; }
                reachable.Add(neighbor);
                toVisit.Enqueue(neighbor);
            }
        }
        return reachable;
    }

    private List<int> Neighbors(int pos)
    {
        int row = ToRow(pos);
        List<int> neighbors = [];
        if (ToRow(pos + 1) == row)
        {
            neighbors.Add(pos + 1);
        }
        if (pos > 0 && ToRow(pos - 1) == row)
        {
            neighbors.Add(pos - 1);
        }
        if (pos + Size < _grid.Length)
        {
            neighbors.Add(pos + Size);
        }
        if (pos - Size >= 0)
        {
            neighbors.Add(pos - Size);
        }
        return neighbors;
    }

}